package acousticfield3d.gui.panels;

import acousticfield3d.gui.MainForm;
import acousticfield3d.scene.Entity;
import acousticfield3d.scene.MeshEntity;
import acousticfield3d.scene.Resources;
import acousticfield3d.scene.Scene;
import acousticfield3d.utils.Color;
import acousticfield3d.utils.Parse;
import javax.swing.JCheckBox;
import javax.swing.JTextField;

/**
 *
 * @author Asier
 */
public class MiscPanel extends javax.swing.JPanel {
    public MainForm mf;
    
    public MiscPanel(MainForm mf) {
        this.mf = mf;
        initComponents();
    }

    public boolean isAmpDiscretizer(){
        return ampDiscCheck.isSelected();
    }
    
    public int getAmpDiscretization(){
        return Parse.toInt( ampDiscText.getText() );
    }
    
    public boolean isPhaseDiscretizer(){
        return phaseDiscCheck.isSelected();
    }

    public JCheckBox getPhaseDiscCheck() {
        return phaseDiscCheck;
    }

    public JTextField getPhaseDiscText() {
        return phaseDiscText;
    }
    
    public int getPhaseDiscretization(){
        return Parse.toInt( phaseDiscText.getText() );
    }
   
    public float getFiniteDiffH(){
        return Parse.toFloat( hDivText.getText() );
    }
        
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maskGroup = new javax.swing.ButtonGroup();
        shadersTypeGroup = new javax.swing.ButtonGroup();
        jPanel3 = new javax.swing.JPanel();
        maskMaskCheck = new javax.swing.JRadioButton();
        maskDisableCheck = new javax.swing.JRadioButton();
        maskVisibleCheck = new javax.swing.JRadioButton();
        maskAddCubeButton = new javax.swing.JButton();
        maskDelButton = new javax.swing.JButton();
        maskAddSphereButton = new javax.swing.JButton();
        colorText = new javax.swing.JTextField();
        phaseDiscCheck = new javax.swing.JCheckBox();
        phaseDiscText = new javax.swing.JTextField();
        reloadShadersButton = new javax.swing.JButton();
        ampDiscCheck = new javax.swing.JCheckBox();
        ampDiscText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        hDivText = new javax.swing.JTextField();

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("mask objects"));

        maskGroup.add(maskMaskCheck);
        maskMaskCheck.setText("mask");
        maskMaskCheck.setToolTipText("Make them mask the other objects, useful for augmented reality");
        maskMaskCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskMaskCheckActionPerformed(evt);
            }
        });

        maskGroup.add(maskDisableCheck);
        maskDisableCheck.setSelected(true);
        maskDisableCheck.setText("disable");
        maskDisableCheck.setToolTipText("the aux objects are not visible");
        maskDisableCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskDisableCheckActionPerformed(evt);
            }
        });

        maskGroup.add(maskVisibleCheck);
        maskVisibleCheck.setText("visible");
        maskVisibleCheck.setToolTipText("make them visible");
        maskVisibleCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskVisibleCheckActionPerformed(evt);
            }
        });

        maskAddCubeButton.setText("Cube");
        maskAddCubeButton.setToolTipText("add a cube");
        maskAddCubeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskAddCubeButtonActionPerformed(evt);
            }
        });

        maskDelButton.setText("Del");
        maskDelButton.setToolTipText("deletes the select objects");
        maskDelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskDelButtonActionPerformed(evt);
            }
        });

        maskAddSphereButton.setText("Sphe");
        maskAddSphereButton.setToolTipText("add a sphere");
        maskAddSphereButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maskAddSphereButtonActionPerformed(evt);
            }
        });

        colorText.setText("255,255,255,255");
        colorText.setToolTipText("Color RGBA");
        colorText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(colorText)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(maskDisableCheck)
                            .addComponent(maskAddCubeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(maskVisibleCheck)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maskMaskCheck))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(maskAddSphereButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(maskDelButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maskDisableCheck)
                    .addComponent(maskVisibleCheck)
                    .addComponent(maskMaskCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maskAddCubeButton)
                    .addComponent(maskAddSphereButton)
                    .addComponent(maskDelButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(colorText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        phaseDiscCheck.setText("Phase discretization:");
        phaseDiscCheck.setToolTipText("enables phase discretization");

        phaseDiscText.setText("10");
        phaseDiscText.setToolTipText("number of phase levels");

        reloadShadersButton.setText("ReloadShaders");
        reloadShadersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reloadShadersButtonActionPerformed(evt);
            }
        });

        ampDiscCheck.setText("Amp discretization:");
        ampDiscCheck.setToolTipText("enables amplitude discretization");

        ampDiscText.setText("10");
        ampDiscText.setToolTipText("different levels of amplitude");

        jLabel2.setText("hdiv:");

        hDivText.setText("5");
        hDivText.setToolTipText("distance between points for stencil approximations wavelength/thisNumber");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(ampDiscCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(phaseDiscCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phaseDiscText)
                            .addComponent(ampDiscText)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hDivText))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(reloadShadersButton)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ampDiscCheck)
                    .addComponent(ampDiscText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(phaseDiscCheck)
                    .addComponent(phaseDiscText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(hDivText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(reloadShadersButton)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void maskMaskCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskMaskCheckActionPerformed
        Scene.setVisible(mf.scene.getEntities(), Entity.TAG_MASK, true);
        Scene.setShader(mf.scene.getEntities(), Entity.TAG_MASK, Resources.SHADER_MASK);
        mf.needUpdate();
    }//GEN-LAST:event_maskMaskCheckActionPerformed

    private void maskDisableCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskDisableCheckActionPerformed
        Scene.setVisible(mf.scene.getEntities(), Entity.TAG_MASK, false);
        mf.needUpdate();
    }//GEN-LAST:event_maskDisableCheckActionPerformed

    private void maskVisibleCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskVisibleCheckActionPerformed
        Scene.setVisible(mf.scene.getEntities(), Entity.TAG_MASK, true);
        Scene.setShader(mf.scene.getEntities(), Entity.TAG_MASK, Resources.SHADER_SOLID_SPEC);
        mf.needUpdate();
    }//GEN-LAST:event_maskVisibleCheckActionPerformed

    private void maskAddCubeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskAddCubeButtonActionPerformed
        MeshEntity me = new MeshEntity(Resources.MESH_BOX, null, Resources.SHADER_SOLID_SPEC);
        me.setTag( Entity.TAG_MASK ); me.setColor( Color.WHITE );
        mf.addMeshEntityToSceneCenter(me);
        mf.needUpdate();
    }//GEN-LAST:event_maskAddCubeButtonActionPerformed

    private void maskDelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskDelButtonActionPerformed
        //Remove from simulation and scene
        for (Entity e : mf.selection){
            if (e.getTag() == Entity.TAG_MASK){
                mf.scene.getEntities().remove( e );
            }
        }
        mf.clearSelection();
        mf.needUpdate();
    }//GEN-LAST:event_maskDelButtonActionPerformed

    private void maskAddSphereButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maskAddSphereButtonActionPerformed
        MeshEntity me = new MeshEntity(Resources.MESH_SPHERE, null, Resources.SHADER_SOLID_SPEC);
        me.setTag( Entity.TAG_MASK ); me.setColor( Color.WHITE );
        mf.addMeshEntityToSceneCenter(me);
        mf.needUpdate();
    }//GEN-LAST:event_maskAddSphereButtonActionPerformed

    private void reloadShadersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reloadShadersButtonActionPerformed
        mf.renderer.reloadShaders();
    }//GEN-LAST:event_reloadShadersButtonActionPerformed

    private void colorTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorTextActionPerformed
        int color = Color.parse( colorText.getText() );
        for (Entity e : mf.selection){
            if (e instanceof MeshEntity && e.getTag() == Entity.TAG_MASK){
                MeshEntity me = (MeshEntity)e;
                me.setColor( color );
            }
        }
        mf.needUpdate();
    }//GEN-LAST:event_colorTextActionPerformed

    public JCheckBox getAmpDicreCheck() {
        return ampDiscCheck;
    }

    public JTextField getAmpDiscreText() {
        return ampDiscText;
    }

    public JCheckBox getPhaseDiscreCheck() {
        return phaseDiscCheck;
    }

    public JTextField getPhaseDiscreText() {
        return phaseDiscText;
    }

    

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox ampDiscCheck;
    private javax.swing.JTextField ampDiscText;
    private javax.swing.JTextField colorText;
    private javax.swing.JTextField hDivText;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JButton maskAddCubeButton;
    private javax.swing.JButton maskAddSphereButton;
    private javax.swing.JButton maskDelButton;
    private javax.swing.JRadioButton maskDisableCheck;
    private javax.swing.ButtonGroup maskGroup;
    private javax.swing.JRadioButton maskMaskCheck;
    private javax.swing.JRadioButton maskVisibleCheck;
    private javax.swing.JCheckBox phaseDiscCheck;
    private javax.swing.JTextField phaseDiscText;
    private javax.swing.JButton reloadShadersButton;
    private javax.swing.ButtonGroup shadersTypeGroup;
    // End of variables declaration//GEN-END:variables
}
